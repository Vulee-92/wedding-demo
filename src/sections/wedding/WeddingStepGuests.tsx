import React, { useState, useEffect, useMemo } from 'react';
import {
    Box, Typography, Button, Stack, Card, CardContent, TextField, Alert, CircularProgress,
    MenuItem, IconButton, Pagination,
    Paper, Divider, Fab, Drawer, useMediaQuery, useTheme,
    Dialog, DialogTitle, DialogContent, DialogActions,
    Stepper, Step, StepLabel,
    Container, Skeleton,
    AlertTitle
} from '@mui/material';
import crypto from 'crypto-js';
import AddCircleOutlineIcon from '@mui/icons-material/AddCircleOutline';
import RemoveCircleOutlineIcon from '@mui/icons-material/RemoveCircleOutline';
import InfoIcon from '@mui/icons-material/Info';
import EmojiEventsIcon from '@mui/icons-material/EmojiEvents';
import { styled } from '@mui/material/styles';
import { Guest } from 'src/types/linkguest';
import GuestTable from './GuestTable';

type FilterStatus = 'all' | 'sent' | 'pending';

// L·∫•y URL c·ªßa Google Apps Script t·ª´ bi·∫øn m√¥i tr∆∞·ªùng
const APPS_SCRIPT_URL = 'https://script.google.com/macros/s/AKfycbzRHvvirevtskJOH_1aiBg6-D_CsoJxMBF1VPPaAa-xRxqrmd-VYlt1RCOE7vy_Jo5jHQ/exec'

// M·∫≠t kh·∫©u v√† th·ªùi gian h·∫øt h·∫°n
const SECRET_PASSWORD_HASH = crypto.SHA256("270925").toString();
const AUTH_KEY = "wedding_guest_auth";
const CACHE_KEY = "wedding_guest_data";
const CACHE_EXPIRY = 5 * 60 * 1000; // 5 ph√∫t

// --- Custom Styled Components ---
const FilterButton = styled(Button)<{ active: boolean, status: FilterStatus }>(({ theme, active, status }) => ({
    flex: 1,
    padding: theme.spacing(1, 2),
    borderRadius: theme.shape.borderRadius,
    border: '1px solid',
    borderColor: active
        ? (status === 'sent' ? theme.palette.success.main : status === 'pending' ? theme.palette.warning.main : 'transparent')
        : theme.palette.grey[300],
    backgroundColor: active
        ? (status === 'sent' ? theme.palette.success.light : status === 'pending' ? theme.palette.warning.light : theme.palette.grey[300])
        : theme.palette.background.paper,
    color: active
        ? (status === 'sent' ? theme.palette.success.dark : status === 'pending' ? theme.palette.warning.dark : theme.palette.text.primary)
        : theme.palette.text.secondary,
    fontWeight: 'bold',
    textTransform: 'none',
    '&:hover': {
        backgroundColor: active
            ? (status === 'sent' ? theme.palette.success.light : theme.palette.warning.light)
            : theme.palette.grey[100],
    },
}));

const TotalGuestsCard = styled(Paper)<{ active: boolean }>(({ theme, active }) => ({
    flex: 1,
    padding: theme.spacing(1, 2),
    borderRadius: theme.shape.borderRadius,
    border: '1px solid',
    borderColor: active ? theme.palette.primary.main : theme.palette.grey[300],
    backgroundColor: active ? theme.palette.primary.light : theme.palette.background.paper,
    color: active ? theme.palette.primary.contrastText : theme.palette.text.primary,
    cursor: 'pointer',
    textAlign: 'center',
    display: 'flex',
    flexDirection: 'column',
    justifyContent: 'center',
    '&:hover': {
        backgroundColor: active ? theme.palette.primary.light : theme.palette.grey[100],
    },
}));

const steps = [
    {
        label: 'Gi·ªõi thi·ªáu',
        description: 'Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi trang qu·∫£n l√Ω kh√°ch m·ªùi. T·∫°i ƒë√¢y, b·∫°n c√≥ th·ªÉ th√™m, s·ª≠a, x√≥a v√† theo d√µi danh s√°ch kh√°ch m·ªùi c·ªßa m√¨nh.',
    },
    {
        label: 'Th√™m Kh√°ch M·ªùi',
        description: 'Nh·∫•n v√†o n√∫t "Th√™m kh√°ch" ho·∫∑c bi·ªÉu t∆∞·ª£ng d·∫•u c·ªông ƒë·ªÉ b·∫Øt ƒë·∫ßu. B·∫°n c√≥ th·ªÉ th√™m t·ª´ng kh√°ch m·ªôt ho·∫∑c s·ª≠ d·ª•ng ch·∫ø ƒë·ªô "Th√™m nhi·ªÅu" ƒë·ªÉ nh·∫≠p danh s√°ch nhanh ch√≥ng.',
    },
    {
        label: 'Qu·∫£n l√Ω & Ch·ªânh s·ª≠a',
        description: 'S·ª≠ d·ª•ng c√°c bi·ªÉu t∆∞·ª£ng tr√™n b·∫£ng ƒë·ªÉ ch·ªânh s·ª≠a th√¥ng tin ho·∫∑c x√≥a kh√°ch m·ªùi. B·∫°n c≈©ng c√≥ th·ªÉ thay ƒë·ªïi tr·∫°ng th√°i "ƒê√£ g·ª≠i" ho·∫∑c "Ch∆∞a g·ª≠i".',
    },
    {
        label: 'L·ªçc & T√¨m ki·∫øm',
        description: 'S·ª≠ d·ª•ng c√°c th·∫ª T·ªïng, ƒê√£ g·ª≠i, Ch∆∞a g·ª≠i ƒë·ªÉ l·ªçc danh s√°ch. D√πng √¥ t√¨m ki·∫øm ƒë·ªÉ nhanh ch√≥ng t√¨m th·∫•y kh√°ch m·ªùi c·ª• th·ªÉ.',
    },
];

// --- Main Component ---
const WeddingStepGuests = () => {
    const theme = useTheme();
    const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
    const urlPreview = 'https://minh-an-wedding2711.vercel.app/';

    const [guests, setGuests] = useState<Guest[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    // State x√°c th·ª±c
    const [password, setPassword] = useState('');
    const [isAuthenticated, setIsAuthenticated] = useState(false);
    const [passwordError, setPasswordError] = useState('');

    // State cho form v√† ch·ªânh s·ª≠a
    const [newGuestName, setNewGuestName] = useState('');
    const [newGuestNote, setNewGuestNote] = useState('');
    const [newGuestType, setNewGuestType] = useState<'bride' | 'groom' | 'general'>('general');
    const [addGuestLoading, setAddGuestLoading] = useState(false);
    const [isDrawerOpen, setIsDrawerOpen] = useState(false);
    const [newGuestsList, setNewGuestsList] = useState([{ name: '', guestType: 'general', note: '' }]);
    const [isBulkAddMode, setIsBulkAddMode] = useState(false);
    const [editingGuest, setEditingGuest] = useState<Guest | null>(null);
const [alertMessage, setAlertMessage] = useState<string | null>(null);
const [alertSeverity, setAlertSeverity] = useState<'success' | 'error' | null>(null);
    // State cho l·ªçc & ph√¢n trang
    const [searchTerm, setSearchTerm] = useState('');
    const [page, setPage] = useState(1);
    const guestsPerPage = 10;
    const [filterStatus, setFilterStatus] = useState<FilterStatus>('all');

    // State cho h∆∞·ªõng d·∫´n & x√≥a
    const [isGuideOpen, setIsGuideOpen] = useState(false);
    const [activeStep, setActiveStep] = useState(0);
    const [deleteDialogOpen, setDeleteDialogOpen] = useState(false);
    const [guestToDelete, setGuestToDelete] = useState<Guest | null>(null);

    const handleNext = () => {
        setActiveStep((prevActiveStep) => prevActiveStep + 1);
    };

    const handleBack = () => {
        setActiveStep((prevActiveStep) => prevActiveStep - 1);
    };

    const handlePasswordSubmit = () => {
        const inputHash = crypto.SHA256(password).toString();
        if (inputHash === SECRET_PASSWORD_HASH) {
            setIsAuthenticated(true);
            const now = new Date();
            const endOfDay = new Date(now.getFullYear(), now.getMonth(), now.getDate(), 23, 59, 59, 999);
            localStorage.setItem(AUTH_KEY, JSON.stringify({
                auth: true,
                expiry: endOfDay.getTime()
            }));
            setPasswordError('');
            fetchGuestsFromSheet(); // aT·∫£i d·ªØ li·ªáu l·∫ßn ƒë·∫ßu sau khi x√°c th·ª±c
        } else {
            setPasswordError('M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    const fetchGuestsFromSheet = async (useCache = true) => {
        setLoading(true);
        setError(null);

        if (useCache) {
            const cachedData = localStorage.getItem(CACHE_KEY);
            if (cachedData) {
                const { data, timestamp } = JSON.parse(cachedData);
                if (Date.now() - timestamp < CACHE_EXPIRY) {
                    setGuests(data);
                    setLoading(false);
                    return;
                }
                localStorage.removeItem(CACHE_KEY);
            }
        }

        try {
            const response = await fetch(`${APPS_SCRIPT_URL}?sheet=üîó Link Kh√°ch M·ªùi`);
            const data = await response.json();

            if (data.success) {
                // S·∫Øp x·∫øp d·ªØ li·ªáu theo timestamp m·ªõi nh·∫•t l√™n tr√™n
                const sortedGuests = data.data.sort((a: Guest, b: Guest) => {
                    // Chuy·ªÉn ƒë·ªïi timestamp th√†nh Date object ƒë·ªÉ so s√°nh
                    const dateA = new Date(a.timestamp);
                    const dateB = new Date(b.timestamp);
                    // S·∫Øp x·∫øp gi·∫£m d·∫ßn (m·ªõi nh·∫•t l√™n ƒë·∫ßu)
                    return dateB.getTime() - dateA.getTime();
                });

                setGuests(sortedGuests);

                // L∆∞u d·ªØ li·ªáu ƒë√£ s·∫Øp x·∫øp v√†o cache
                localStorage.setItem(CACHE_KEY, JSON.stringify({
                    data: sortedGuests,
                    timestamp: Date.now()
                }));
            } else {
                setError(data.message);
            }
        } catch (err) {
            console.error('L·ªói khi t·∫£i danh s√°ch kh√°ch m·ªùi:', err);
            setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch kh√°ch m·ªùi. Vui l√≤ng th·ª≠ l·∫°i.');
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        const storedAuth = localStorage.getItem(AUTH_KEY);
        if (storedAuth) {
            const { auth, expiry } = JSON.parse(storedAuth);
            if (auth && Date.now() < expiry) {
                setIsAuthenticated(true);
                fetchGuestsFromSheet();
            } else {
                localStorage.removeItem(AUTH_KEY);
                setIsAuthenticated(false);
            }
        }
    }, []);

    // H√†m th√™m/s·ª≠a m·ªôt kh√°ch m·ªùi
    const handleSaveGuest = async () => {
        if (!newGuestName.trim()) {
            alert('Vui l√≤ng nh·∫≠p t√™n kh√°ch m·ªùi.');
            return;
        }
        setAddGuestLoading(true);
        setError(null);

        const newLink = `${urlPreview}?name=${encodeURIComponent(newGuestName.trim())}`;
        let bodyData: any = {};

        if (editingGuest) {
            bodyData = {
                action: "update",
                _id: editingGuest._id, // G·ª≠i ID duy nh·∫•t
                name: newGuestName.trim(),
                guestType: newGuestType,
                link: newLink,
                note: newGuestNote.trim(),
            };
        } else {
            bodyData = {
                formType: "guest-link",
                name: newGuestName.trim(),
                guestType: newGuestType,
                link: newLink,
                note: newGuestNote.trim(),
            };
        }

        try {
            const response = await fetch(APPS_SCRIPT_URL, {
                method: 'POST',
                mode: 'no-cors',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(bodyData),
            });

            // Sau khi g·ª≠i th√†nh c√¥ng, ƒë·ª£i 1s ƒë·ªÉ Google Sheet x·ª≠ l√Ω
            setTimeout(() => {
                fetchGuestsFromSheet(false);
                // Reset form
                setNewGuestName('');
                setNewGuestNote('');
                setNewGuestType('general');
                setIsDrawerOpen(false);
                setEditingGuest(null);
                setPage(1);
                setAddGuestLoading(false);
            }, 1000);
            setAlertMessage(editingGuest ? 'C·∫≠p nh·∫≠t th√†nh c√¥ng!' : 'Th√™m kh√°ch m·ªùi th√†nh c√¥ng!');
        setAlertSeverity('success');
          await fetchGuestsFromSheet(false);
            


        } catch (err) {
            console.error('L·ªói khi l∆∞u kh√°ch m·ªùi:', err);
            setError('L∆∞u kh√°ch m·ªùi th·∫•t b·∫°i.');
            setAddGuestLoading(false);
        }
    };

    const handleBulkAddGuests = async () => {
        const validGuests = newGuestsList.filter(guest => guest.name.trim() !== '');
        if (validGuests.length === 0) {
            alert('Vui l√≤ng nh·∫≠p √≠t nh·∫•t m·ªôt t√™n kh√°ch m·ªùi.');
            return;
        }

        setAddGuestLoading(true);
        setError(null);
        try {
            const postData = {
                formType: "guest-link-bulk",
                guests: validGuests.map(g => ({
                    name: g.name.trim(),
                    link: `${urlPreview}?name=${encodeURIComponent(g.name.trim())}`,
                    guestType: g.guestType,
                    note: g.note || '',
                })),
            };

            const response = await fetch(APPS_SCRIPT_URL, {
                method: 'POST',
                mode: 'no-cors',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(postData),
            });

            // Sau khi g·ª≠i th√†nh c√¥ng, ƒë·ª£i 1s ƒë·ªÉ Google Sheet x·ª≠ l√Ω
            setTimeout(() => {
                fetchGuestsFromSheet(false);
                setIsDrawerOpen(false);
                setNewGuestsList([{ name: '', guestType: 'general', note: '' }]);
                setPage(1);
                setAddGuestLoading(false);
            }, 1000);
              <Alert severity="success">
                <AlertTitle>Th√™m kh√°ch m·ªùi th√†nh c√¥ng!!</AlertTitle>
               ƒêang t·∫£i l·∫°i danh s√°ch...
            </Alert>
            // alert('Th√™m danh s√°ch kh√°ch m·ªùi th√†nh c√¥ng! ƒêang t·∫£i l·∫°i danh s√°ch...');

        } catch (err) {
            console.error('L·ªói khi th√™m nhi·ªÅu kh√°ch m·ªùi:', err);
            setError('Th√™m nhi·ªÅu kh√°ch m·ªùi th·∫•t b·∫°i.');
            setAddGuestLoading(false);
        }
    };

    const handleUpdateStatus = async (guestId: string, newStatus: 'pending' | 'sent') => {
        // C·∫≠p nh·∫≠t state ngay l·∫≠p t·ª©c ƒë·ªÉ giao di·ªán ph·∫£n h·ªìi nhanh
        const updatedGuests = guests.map(guest =>
            guest._id === guestId ? { ...guest, status: newStatus } : guest
        );
        setGuests(updatedGuests);

        // C·∫≠p nh·∫≠t cache
        localStorage.setItem(CACHE_KEY, JSON.stringify({ data: updatedGuests, timestamp: Date.now() }));

        try {
            // G·ª≠i y√™u c·∫ßu API ng·∫ßm
            await fetch(APPS_SCRIPT_URL, {
                method: 'POST',
                mode: 'no-cors',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ action: "patch", _id: guestId, newStatus }),
            });
        } catch (err) {
            console.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i:', err);
            setError('C·∫≠p nh·∫≠t tr·∫°ng th√°i th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.');
            // Kh√¥i ph·ª•c l·∫°i state n·∫øu c√≥ l·ªói
            fetchGuestsFromSheet(false);
        }
    };

    // --- H√ÄM X√ìA KH√ÅCH M·ªúI ---
    const handleConfirmDelete = (guestId: string) => {
        const guest = guests.find(g => g._id === guestId);
        if (guest) {
            setGuestToDelete(guest);
            setDeleteDialogOpen(true);
        }
    };

    const handleDeleteGuest = async () => {
        if (!guestToDelete) return;
        setDeleteDialogOpen(false);

        // C·∫≠p nh·∫≠t state ngay l·∫≠p t·ª©c
        const updatedGuests = guests.filter(guest => guest._id !== guestToDelete._id);
        setGuests(updatedGuests);
        setPage(1);

        // C·∫≠p nh·∫≠t cache
        localStorage.setItem(CACHE_KEY, JSON.stringify({ data: updatedGuests, timestamp: Date.now() }));

        try {
            // G·ª≠i y√™u c·∫ßu x√≥a ng·∫ßm
            await fetch(APPS_SCRIPT_URL, {
                method: 'POST',
                mode: 'no-cors',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ action: "delete", _id: guestToDelete._id }),
            });
            alert('X√≥a kh√°ch m·ªùi th√†nh c√¥ng!');
             <Alert severity="success">
                <AlertTitle>X√≥a kh√°ch m·ªùi th√†nh c√¥ng!</AlertTitle>
               ƒêang t·∫£i l·∫°i danh s√°ch...
            </Alert>
        } catch (err) {
            console.error('L·ªói khi x√≥a kh√°ch m·ªùi:', err);
            setError('X√≥a kh√°ch m·ªùi th·∫•t b·∫°i.');
            // Kh√¥i ph·ª•c l·∫°i state n·∫øu c√≥ l·ªói
            fetchGuestsFromSheet(false);
        }
    };

    // --- H√ÄM CH·ªàNH S·ª¨A KH√ÅCH M·ªúI ---
    const handleEditGuest = (guest: Guest) => {
        setEditingGuest(guest);
        setNewGuestName(guest.name);
        setNewGuestNote(guest.note || '');
        setNewGuestType(guest.guestType);
        setIsDrawerOpen(true);
        setIsBulkAddMode(false);
    };

    const handleAddGuestRow = () => {
        setNewGuestsList([...newGuestsList, { name: '', guestType: 'general', note: '' }]);
    };

    const handleRemoveGuestRow = (index: number) => {
        const list = [...newGuestsList];
        if (list.length > 1) {
            list.splice(index, 1);
            setNewGuestsList(list);
        }
    };

    const handleGuestListChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>, index: number, field: string) => {
        const list = [...newGuestsList];
        switch (field) {
            case 'name':
                list[index].name = e.target.value;
                break;
            case 'guestType':
                list[index].guestType = e.target.value as 'bride' | 'groom' | 'general';
                break;
            case 'note':
                list[index].note = e.target.value;
                break;
            default:
                break;
        }
        setNewGuestsList(list);
    };

    const filteredGuests = useMemo(() => {
        let filtered = guests;
        if (filterStatus !== 'all') {
            filtered = filtered.filter(guest => guest.status === filterStatus);
        }
        if (searchTerm) {
            filtered = filtered.filter(guest =>
                guest.name.toLowerCase().includes(searchTerm.toLowerCase())
            );
        }
        return filtered;
    }, [guests, searchTerm, filterStatus]);

    const totalPages = Math.ceil(filteredGuests.length / guestsPerPage);
    const currentGuests = useMemo(() => {
        const startIndex = (page - 1) * guestsPerPage;
        return filteredGuests.slice(startIndex, startIndex + guestsPerPage);
    }, [page, filteredGuests, guestsPerPage]);

    const totalGuests = guests.length;
    const sentGuests = guests.filter(g => g.status === 'sent').length;
    const pendingGuests = totalGuests - sentGuests;

    const toggleDrawer = (open: boolean) => () => {
        setIsDrawerOpen(open);
        if (!open) {
            setNewGuestName('');
            setNewGuestNote('');
            setNewGuestType('general');
            setNewGuestsList([{ name: '', guestType: 'general', note: '' }]);
            setIsBulkAddMode(false);
            setEditingGuest(null); // Reset tr·∫°ng th√°i ch·ªânh s·ª≠a
        }
    };

    const drawerContent = (
        <Box sx={{ width: isMobile ? '100vw' : 400, p: 3 }}>
            <Stack direction="row" justifyContent="space-between" alignItems="center" mb={2}>
                <Typography variant="h6" fontWeight="bold">
                    {editingGuest ? 'Ch·ªânh s·ª≠a kh√°ch m·ªùi' : 'Th√™m kh√°ch m·ªùi'}
                </Typography>
                <IconButton onClick={toggleDrawer(false)}>
                    <RemoveCircleOutlineIcon />
                </IconButton>
            </Stack>
            <Divider sx={{ mb: 2 }} />

            {!editingGuest && (
                <Stack direction="row" spacing={1} mb={2}>
                    <Button
                        variant={isBulkAddMode ? 'outlined' : 'contained'}
                        onClick={() => setIsBulkAddMode(false)}
                        fullWidth
                    >
                        Th√™m m·ªôt kh√°ch
                    </Button>
                    <Button
                        variant={isBulkAddMode ? 'contained' : 'outlined'}
                        onClick={() => setIsBulkAddMode(true)}
                        fullWidth
                    >
                        Th√™m nhi·ªÅu
                    </Button>
                </Stack>
            )}

            {!isBulkAddMode ? (
                <Stack spacing={2}>
                    <TextField
                        label="T√™n kh√°ch m·ªùi"
                        variant="outlined"
                        size="small"
                        value={newGuestName}
                        onChange={(e) => setNewGuestName(e.target.value)}
                        fullWidth
                    />
                    <TextField
                        label="Lo·∫°i kh√°ch"
                        select
                        variant="outlined"
                        size="small"
                        value={newGuestType}
                        onChange={(e) => setNewGuestType(e.target.value as 'bride' | 'groom' | 'general')}
                        fullWidth
                    >
                        <MenuItem value="general">Chung</MenuItem>
                        <MenuItem value="bride">Kh√°ch c√¥ d√¢u</MenuItem>
                        <MenuItem value="groom">Kh√°ch ch√∫ r·ªÉ</MenuItem>
                    </TextField>
                    <TextField
                        label="Ghi ch√∫"
                        variant="outlined"
                        size="small"
                        value={newGuestNote}
                        onChange={(e) => setNewGuestNote(e.target.value)}
                        fullWidth
                    />
                    <Button
                        variant="contained"
                        onClick={handleSaveGuest}
                        disabled={addGuestLoading || !newGuestName.trim()}
                        fullWidth
                    >
                        {addGuestLoading ? <CircularProgress size={24} /> : (editingGuest ? 'C·∫≠p nh·∫≠t' : 'Th√™m')}
                    </Button>
                </Stack>
            ) : (
                <Stack spacing={2}>
                    {newGuestsList.map((guest, index) => (
                        <Stack direction="row" spacing={1} alignItems="center" key={index}>
                            <TextField
                                label="T√™n kh√°ch"
                                value={guest.name}
                                onChange={(e) => handleGuestListChange(e, index, 'name')}
                                size="small"
                                fullWidth
                            />
                            <TextField
                                label="Lo·∫°i kh√°ch"
                                select
                                value={guest.guestType}
                                onChange={(e) => handleGuestListChange(e, index, 'guestType')}
                                size="small"
                                sx={{ minWidth: 100 }}
                            >
                                <MenuItem value="general">Chung</MenuItem>
                                <MenuItem value="bride">C√¥ d√¢u</MenuItem>
                                <MenuItem value="groom">Ch√∫ r·ªÉ</MenuItem>
                            </TextField>
                            <IconButton color="primary" onClick={handleAddGuestRow}>
                                <AddCircleOutlineIcon />
                            </IconButton>
                            {newGuestsList.length > 1 && (
                                <IconButton color="error" onClick={() => handleRemoveGuestRow(index)}>
                                    <RemoveCircleOutlineIcon />
                                </IconButton>
                            )}
                        </Stack>
                    ))}
                    <Button
                        onClick={handleBulkAddGuests}
                        variant="contained"
                        disabled={addGuestLoading || newGuestsList.every(g => g.name.trim() === '')}
                        fullWidth
                    >
                        {addGuestLoading ? <CircularProgress size={24} /> : 'Th√™m danh s√°ch'}
                    </Button>
                </Stack>
            )}
        </Box>
    );

    const mainContent = (
        <Box sx={{ flexGrow: 1, px: { xs: 0, md: 4, lg: 8 } }}>
            <Card sx={{ borderRadius: 2, boxShadow: 3 }}>
                <CardContent >
                    <Box sx={{
                        display: "flex",
                        flexDirection: { xs: 'column', md: 'row' },
                        justifyContent: "space-between",
                        alignItems: { xs: 'flex-start', md: 'center' }
                    }}>
                        <Box>
                            <Typography variant="h5" component="h2" gutterBottom fontWeight="bold">Danh s√°ch kh√°ch m·ªùi</Typography>
                            <Typography variant="body1" color="text.secondary" mb={3}>
                                Th√™m kh√°ch m·ªùi v√† t·∫°o link c√° nh√¢n ƒë·ªÉ h·ªç c√≥ th·ªÉ x√°c nh·∫≠n tham d·ª±.
                            </Typography>
                        </Box>

                        <Box sx={{ mb: { xs: 2, md: 0 } }}>
                            <Button
                                variant="outlined"
                                component="span"
                                sx={{ borderRadius: 2 }}
                                onClick={toggleDrawer(true)}>
                                Th√™m kh√°ch
                            </Button>
                        </Box>
                    </Box>

                    <Paper elevation={0} sx={{ p: 1, mb: 1, borderRadius: 2, border: '1px solid #e0e0e0' }}>
                        <Stack
                            direction="row"
                            justifyContent="space-between"
                            alignItems="center"
                            spacing={2}
                        >
                            <TotalGuestsCard active={filterStatus === 'all'} onClick={() => setFilterStatus('all')}>
                                <Typography variant="h4" color="inherit" fontWeight="bold">{totalGuests}</Typography>
                                <Typography variant="caption" color="inherit" sx={{ mt: -0.5, fontSize: 8 }}>T·ªïng</Typography>
                            </TotalGuestsCard>
                            <TotalGuestsCard active={filterStatus === 'sent'} onClick={() => setFilterStatus('sent')}>
                                <Typography variant="h4" color="inherit" fontWeight="bold">{sentGuests}</Typography>
                                <Typography variant="caption" color="inherit" sx={{ mt: -0.5, fontSize: 8 }}>ƒê√£ g·ª≠i</Typography>
                            </TotalGuestsCard>
                            <TotalGuestsCard active={filterStatus === 'pending'} onClick={() => setFilterStatus('pending')}>
                                <Typography variant="h4" color="inherit" fontWeight="bold">{pendingGuests}</Typography>
                                <Typography variant="caption" color="inherit" sx={{ mt: -0.5, fontSize: 8 }}>Ch∆∞a g·ª≠i</Typography>
                            </TotalGuestsCard>
                        </Stack>
                    </Paper>

                    <Box sx={{ mb: 2 }}>
                        <TextField
                            label="T√¨m ki·∫øm kh√°ch m·ªùi..."
                            variant="outlined"
                            size="small"
                            value={searchTerm}
                            onChange={(e) => {
                                setSearchTerm(e.target.value);
                                setPage(1);
                            }}
                            fullWidth
                            sx={{
                                '& .MuiOutlinedInput-root': {
                                    borderRadius: 2,
                                },
                            }}
                        />
                    </Box>

                    {loading ? (
                        <Box sx={{ p: 4 }}>
                            <Skeleton variant="rectangular" height={40} sx={{ mb: 2 }} />
                            <Skeleton variant="rectangular" height={200} />
                            <Skeleton variant="rectangular" height={40} sx={{ mt: 2 }} />
                        </Box>
                    ) : error ? (
                        <Alert severity="error">{error}</Alert>
                    ) : (
                        <>
                            <GuestTable
                                guests={currentGuests}
                                onEdit={handleEditGuest}
                                onDelete={handleConfirmDelete}
                                onUpdateStatus={handleUpdateStatus}
                            />
                            {totalPages > 1 && (
                                <Box sx={{ display: 'flex', justifyContent: 'center', mt: 2 }}>
                                    <Pagination
                                        count={totalPages}
                                        page={page}
                                        onChange={(event, value) => setPage(value)}
                                        color="primary"
                                    />
                                </Box>
                            )}
                        </>
                    )}
                </CardContent>

                <Fab
                    color="primary"
                    aria-label="add"
                    sx={{
                        position: 'fixed',
                        bottom: 16,
                        right: 16,
                    }}
                    onClick={toggleDrawer(true)}
                >
                    <AddCircleOutlineIcon />
                </Fab>
            </Card>
        </Box>
    );

    const passwordPrompt = (
        <Box sx={{
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            height: '100vh',
            px: 2,
            textAlign: 'center'
        }}>
            <Card sx={{ p: 4, width: '100%', maxWidth: 400, borderRadius: 2, boxShadow: 3 }}>
                <Typography variant="h6" fontWeight="bold" mb={2}>
                    Nh·∫≠p M·∫≠t Kh·∫©u
                </Typography>
                <TextField
                    label="M·∫≠t kh·∫©u"
                    type="password"
                    variant="outlined"
                    size="small"
                    fullWidth
                    value={password}
                    onChange={(e) => {
                        const onlyNums = e.target.value.replace(/\D/g, ''); // lo·∫°i b·ªè k√Ω t·ª± kh√¥ng ph·∫£i s·ªë
                        setPassword(onlyNums);
                    }}
                    onKeyPress={(e) => {
                        if (e.key === 'Enter') {
                            handlePasswordSubmit();
                        }
                    }}
                    error={!!passwordError}
                    helperText={passwordError}
                    inputProps={{ inputMode: 'numeric', pattern: '[0-9]*' }} // g·ª£i √Ω b√†n ph√≠m s·ªë tr√™n mobile
                    sx={{ mb: 2 }}
                />
                <Button
                    variant="contained"
                    onClick={handlePasswordSubmit}
                    fullWidth
                >
                    Truy c·∫≠p
                </Button>
            </Card>
        </Box>
    );

    return (
        <Container maxWidth="xl" sx={{ p: 0 }}>
               {alertMessage && (
            <Alert
                severity={alertSeverity || 'success'}
                onClose={() => { setAlertMessage(null); setAlertSeverity(null); }}
                sx={{ mb: 2 }}
            >
                <AlertTitle>{alertMessage}</AlertTitle>
            </Alert>
        )}
            <Box sx={{ display: 'flex', flexDirection: 'column', minHeight: '100vh', bgcolor: theme.palette.grey[100] }}>
                {/* Header */}
                <Box sx={{
                    p: 2,
                    mb: 4,
                    background: `linear-gradient(45deg, ${theme.palette.primary.main} 30%)`,
                    color: '#fff',
                }}>
                    <Stack direction="row" justifyContent="space-between" alignItems="center">
                        <Stack direction="row" alignItems="center" spacing={1}>
                            <EmojiEventsIcon sx={{ fontSize: { xs: 30, md: 40 } }} />
                            <Typography variant="h5" component="h1" fontWeight="bold">
                                Qu·∫£n l√Ω kh√°ch m·ªùi
                            </Typography>
                        </Stack>
                        <Button
                            variant="text"
                            sx={{ color: '#fff' }}
                            startIcon={<InfoIcon />}
                            onClick={() => setIsGuideOpen(true)}
                        >
                            <Typography sx={{ display: { xs: 'none', sm: 'block' } }}>H∆∞·ªõng d·∫´n</Typography>
                        </Button>
                    </Stack>
                </Box>

                {/* Main Content or Password Prompt */}
                {isAuthenticated ? mainContent : passwordPrompt}

                {/* Footer */}
                <Box component="footer" sx={{ py: 3, px: 2, mt: 'auto', bgcolor: theme.palette.grey[200] }}>
                    <Typography variant="body2" color="text.secondary" align="center">
                        {'Copyright ¬© '}
                        <a href="https://mo-wedding.vercel.app/" style={{ textDecoration: 'none', color: theme.palette.text.secondary }}>
                            MoWedding
                        </a>{' '}
                        {new Date().getFullYear()}.
                    </Typography>
                </Box>

                {/* Drawer for adding/editing guests */}
                <Drawer
                    anchor={isMobile ? 'bottom' : 'right'}
                    open={isDrawerOpen}
                    onClose={toggleDrawer(false)}
                >
                    {drawerContent}
                </Drawer>

                {/* Dialog for guide/tutorial */}
                <Dialog open={isGuideOpen} onClose={() => setIsGuideOpen(false)}>
                    <DialogTitle>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng</DialogTitle>
                    <DialogContent>
                        <Stepper activeStep={activeStep} orientation="vertical">
                            {steps.map((step, index) => (
                                <Step key={step.label}>
                                    <StepLabel>{step.label}</StepLabel>
                                    <Box sx={{ mb: 2 }}>
                                        <Typography>{step.description}</Typography>
                                    </Box>
                                </Step>
                            ))}
                        </Stepper>
                    </DialogContent>
                    <DialogActions>
                        <Button
                            disabled={activeStep === 0}
                            onClick={handleBack}
                        >
                            Quay l·∫°i
                        </Button>
                        {activeStep === steps.length - 1 ? (
                            <Button onClick={() => setIsGuideOpen(false)} variant="contained">
                                Ho√†n th√†nh
                            </Button>
                        ) : (
                            <Button onClick={handleNext} variant="contained">
                                Ti·∫øp
                            </Button>
                        )}
                    </DialogActions>
                </Dialog>

                {/* H·ªôp tho·∫°i x√°c nh·∫≠n x√≥a */}
                <Dialog
                    open={deleteDialogOpen}
                    onClose={() => setDeleteDialogOpen(false)}
                    aria-labelledby="alert-dialog-title"
                    aria-describedby="alert-dialog-description"
                >
                    <DialogTitle id="alert-dialog-title">X√°c nh·∫≠n x√≥a kh√°ch m·ªùi?</DialogTitle>
                    <DialogContent>
                        <Typography variant="body2">
                            B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a kh√°ch m·ªùi **{guestToDelete?.name}**? H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c.
                        </Typography>
                    </DialogContent>
                    <DialogActions>
                        <Button onClick={() => setDeleteDialogOpen(false)}>H·ªßy</Button>
                        <Button onClick={handleDeleteGuest} color="error" autoFocus>
                            X√≥a
                        </Button>
                    </DialogActions>
                </Dialog>
            </Box>
        </Container>
    );
};
export default WeddingStepGuests;